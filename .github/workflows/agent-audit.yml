name: Agent Audit with Claude Code

on:
  workflow_dispatch:
  # schedule:
  #   - cron: '0 0 * * 0'  # Weekly on Sundays - uncomment when ready

jobs:
  audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for complete analysis
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Claude Code CLI
      run: npm install -g @anthropic-ai/claude-code
    
    - name: Create reports directory
      run: mkdir -p reports
    
    - name: Run Agent Auditor
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        echo "🤖 Running Agent Audit with Claude Code..."
        
        # Debug: Check if API key is set
        if [ -z "$ANTHROPIC_API_KEY" ]; then
          echo "❌ Error: ANTHROPIC_API_KEY is not set"
          exit 1
        fi
        echo "✅ API key is configured"
        
        # Extract the agent content without YAML frontmatter
        # Use awk for better portability between BSD and GNU systems
        awk 'BEGIN {front=0} /^---$/ {front++; next} front>=2 {print}' .claude/agents/agent-auditor.md > /tmp/agent-prompt.txt
        
        # Debug: Check if prompt file has content
        echo "Prompt file size: $(wc -c < /tmp/agent-prompt.txt) bytes"
        if [ ! -s /tmp/agent-prompt.txt ]; then
          echo "❌ Error: Agent prompt file is empty"
          echo "Checking if agent file exists:"
          ls -la .claude/agents/agent-auditor.md
          echo "First 10 lines of agent file:"
          head -10 .claude/agents/agent-auditor.md
          exit 1
        fi
        echo "First 100 chars of prompt: $(head -c 100 /tmp/agent-prompt.txt)"
        
        # Run the agent auditor using Claude Code CLI
        # Using a file to avoid shell escaping issues with the multiline prompt
        cat /tmp/agent-prompt.txt | ANTHROPIC_API_KEY="$ANTHROPIC_API_KEY" claude --print \
          --allowedTools "Read Glob Grep Write" \
          > reports/agent-audit-$(date +%Y%m%d).md
        
        # Check if report was created and has content
        if [ ! -s reports/agent-audit-$(date +%Y%m%d).md ]; then
          echo "❌ Error: Report file is empty or not created"
          exit 1
        fi
        
        echo "✅ Audit complete"
    
    - name: Check for Critical Issues
      id: check
      run: |
        REPORT_FILE=$(ls reports/agent-audit-*.md | head -1)
        if grep -q "❌" "$REPORT_FILE"; then
          echo "has_critical=true" >> $GITHUB_OUTPUT
          echo "⚠️ Critical issues found in audit"
        else
          echo "has_critical=false" >> $GITHUB_OUTPUT
          echo "✅ No critical issues found"
        fi
        
        if grep -q "⚠️" "$REPORT_FILE"; then
          echo "has_warnings=true" >> $GITHUB_OUTPUT
        else
          echo "has_warnings=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Upload Audit Report
      uses: actions/upload-artifact@v4
      with:
        name: agent-audit-${{ github.run_number }}
        path: reports/agent-audit-*.md
    
    - name: Create or Update Issue for Audit Findings
      if: steps.check.outputs.has_critical == 'true' || steps.check.outputs.has_warnings == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Find the report file using native fs instead of glob
          const reportFiles = fs.readdirSync('reports')
            .filter(f => f.startsWith('agent-audit-') && f.endsWith('.md'))
            .map(f => `reports/${f}`);
          
          if (reportFiles.length === 0) {
            console.log('No report file found');
            return;
          }
          
          const reportPath = reportFiles[0];
          const report = fs.readFileSync(reportPath, 'utf8');
          
          // Extract issues from report
          const extractIssues = (content) => {
            const issues = [];
            
            // Extract critical issues
            const criticalMatch = content.match(/## Critical Issues[\s\S]*?(?=\n##|$)/);
            if (criticalMatch) {
              const criticalLines = criticalMatch[0].split('\n');
              criticalLines.forEach(line => {
                if (line.match(/^[0-9]+\.|^###|^-/) && line.includes('.md')) {
                  issues.push({
                    type: 'critical',
                    text: line.trim(),
                    id: line.replace(/[^a-zA-Z0-9]/g, '').substring(0, 20)
                  });
                }
              });
            }
            
            // Extract warnings
            const warningsMatch = content.match(/## Warnings[\s\S]*?(?=\n##|$)/);
            if (warningsMatch) {
              const warningLines = warningsMatch[0].split('\n');
              warningLines.forEach(line => {
                if (line.match(/^[0-9]+\.|^###|^-/) && line.includes('.md')) {
                  issues.push({
                    type: 'warning',
                    text: line.trim(),
                    id: line.replace(/[^a-zA-Z0-9]/g, '').substring(0, 20)
                  });
                }
              });
            }
            
            return issues;
          };
          
          const currentIssues = extractIssues(report);
          
          // Check for existing open agent-audit issues
          const existingIssues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'agent-audit'
          });
          
          if (existingIssues.data.length > 0) {
            const existingIssue = existingIssues.data[0];
            
            // Extract previously reported issue IDs from hidden comment
            const previousIdsMatch = existingIssue.body.match(/<!-- REPORTED_ISSUES: (.*?) -->/);
            const previousIds = previousIdsMatch ? JSON.parse(previousIdsMatch[1]) : [];
            
            // Find new issues not previously reported
            const newIssues = currentIssues.filter(issue => 
              !previousIds.includes(issue.id)
            );
            
            if (newIssues.length > 0) {
              // Format comment with only new issues
              let commentBody = '## 🔍 New Issues Found\n\n';
              
              const newCritical = newIssues.filter(i => i.type === 'critical');
              const newWarnings = newIssues.filter(i => i.type === 'warning');
              
              if (newCritical.length > 0) {
                commentBody += '### ❌ New Critical Issues\n';
                newCritical.forEach(issue => {
                  commentBody += `${issue.text}\n`;
                });
                commentBody += '\n';
              }
              
              if (newWarnings.length > 0) {
                commentBody += '### ⚠️ New Warnings\n';
                newWarnings.forEach(issue => {
                  commentBody += `${issue.text}\n`;
                });
                commentBody += '\n';
              }
              
              commentBody += `[View full report](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n`;
              
              // Add comment to existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: commentBody
              });
              
              console.log(`Added comment with ${newIssues.length} new issues to existing issue #${existingIssue.number}`);
            } else {
              console.log('No new issues found. Skipping comment.');
            }
          } else {
            // Create new issue with all findings
            const summaryMatch = report.match(/## Summary[\s\S]*?(?=\n##|$)/);
            const summarySection = summaryMatch ? summaryMatch[0] : '';
            
            const criticalMatch = report.match(/## Critical Issues[\s\S]*?(?=\n##|$)/);
            const criticalSection = criticalMatch ? criticalMatch[0] : '';
            
            const warningsMatch = report.match(/## Warnings[\s\S]*?(?=\n##|$)/);
            const warningsSection = warningsMatch ? warningsMatch[0] : '';
            
            let issueBody = '# 🤖 Agent Audit Report\n\n';
            
            if (summarySection) {
              issueBody += summarySection + '\n\n';
            }
            
            if (criticalSection) {
              issueBody += criticalSection + '\n\n';
            }
            
            if (warningsSection) {
              issueBody += warningsSection + '\n\n';
            }
            
            issueBody += `---\n\n`;
            issueBody += `📊 **Run Details**\n`;
            issueBody += `- Trigger: ${context.eventName}\n`;
            issueBody += `- Run ID: ${context.runId}\n`;
            issueBody += `- [View full report](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n\n`;
            
            // Add hidden comment with issue IDs for tracking
            const issueIds = currentIssues.map(i => i.id);
            issueBody += `<!-- REPORTED_ISSUES: ${JSON.stringify(issueIds)} -->`;
            
            const labels = ['agent-audit', 'maintenance', 'automated'];
            if (steps.check.outputs.has_critical === 'true') {
              labels.push('critical');
            }
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Agent Audit: Issues Found',
              body: issueBody,
              labels: labels
            });
            
            console.log('Created new agent-audit issue');
          }
    
    - name: Add Summary to GitHub Actions
      if: always()
      run: |
        REPORT_FILE=$(ls reports/agent-audit-*.md | head -1)
        echo "# 🤖 Agent Audit Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Extract summary section from report
        if [ -f "$REPORT_FILE" ]; then
          # Get the first 50 lines or until the first ## after Summary
          sed -n '/## Summary/,/^##[^#]/p' "$REPORT_FILE" | head -50 >> $GITHUB_STEP_SUMMARY
        else
          echo "No report generated" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "Critical Issues: ${{ steps.check.outputs.has_critical || 'unknown' }}" >> $GITHUB_STEP_SUMMARY
        echo "Warnings: ${{ steps.check.outputs.has_warnings || 'unknown' }}" >> $GITHUB_STEP_SUMMARY